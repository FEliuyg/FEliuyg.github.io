{"meta":{"title":"FEliuyg的个人博客","subtitle":null,"description":null,"author":"FEliuyg","url":"https://feliuyg.github.com"},"pages":[{"title":"","date":"2017-03-20T13:25:20.000Z","updated":"2017-03-20T13:25:20.000Z","comments":false,"path":"tags/index.html","permalink":"https://feliuyg.github.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2017-03-20T13:27:45.000Z","updated":"2017-03-20T13:27:45.000Z","comments":false,"path":"categories/index.html","permalink":"https://feliuyg.github.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-03-21T02:00:45.000Z","updated":"2017-03-21T02:00:45.000Z","comments":true,"path":"demo/guessNumber.html","permalink":"https://feliuyg.github.com/demo/guessNumber.html","excerpt":"","text":"pushstate #prompt { font-size: 16px; } table { width: 90%; margin: 10px; margin-left: 5%; } #low, #high { background-color: lightgray; height: 1em; } #mid { background-color: green; } I'm thinking of a number ... window.onload = newgame window.onpopstate = popState var state,ui function newgame (playagain) { ui = { heading: null, prompt: null, input: null, low: null, mid: null, high: null } for (var id in ui) { ui[id] = document.getElementById(id) } ui.input.onchange = handleGuess state = { n: Math.floor(99 * Math.random() + 1), low: 0, high: 100, guessnum: 0, guess: undefined } display(state) if (playagain === true) { save(state) } } function handleGuess () { var g = parseInt(this.value) if ((g > state.low) && (g < state.high)) { if (g < state.n) { state.low = g } else if (g > state.n) { state.high = g } state.guess = g state.guessnum++ save(state) display(state) } else { alert(\"Please enter a number greater than \" + state.low + \" and less than \" + state.high) } } function display (state) { ui.heading.innerHTML = document.title = \"I'm thinking of a number between \" + state.low + \" and \" + state.high + \".\" ui.low.style.width = state.low + \"%\" ui.mid.style.width = (state.high - state.low) + \"%\" ui.high.style.width = (100 - state.high) + \"%\" ui.input.style.visibility = \"visible\" ui.input.value = \"\" ui.input.focus() if (state.guess === undefined) { ui.prompt.innerHTML = \"Type your guess and hit Enter:\" } else if (state.guess < state.n) { ui.prompt.innerHTML = state.guess + \" is too low. Guess again:\" } else if (state.guess > state.n) { ui.prompt.innerHTML = state.guess + \" is too high. Guess again:\" } else { ui.input.style.visibility = \"hidden\" ui.heading.innerHTML = document.title = state.guess + \" is correct!\" ui.prompt.innerHTML = \"You win! Play Again\" } } function save (state) { if (!history.pushState) return var url = \"#guess=\" + state.guessnum history.pushState(state, \"\", url) } function popState (event) { if (event.state) { state = event.state display(state) } else { history.replaceState(state, \"\", \"#guess\" + state.guessnum) } }"}],"posts":[{"title":"atom常用插件整理(一直更新)","slug":"atom","date":"2017-04-12T01:59:02.000Z","updated":"2017-04-12T02:39:45.000Z","comments":true,"path":"2017/04/12/atom/","link":"","permalink":"https://feliuyg.github.com/2017/04/12/atom/","excerpt":"","text":"1.open-in-browsers 在atom中直接用浏览器打开当前文件快捷键打开ctrl + alt + o2.minimap 右侧显示网页代码的缩略图导航，可以快速定位代码","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://feliuyg.github.com/tags/工具/"},{"name":"atom","slug":"atom","permalink":"https://feliuyg.github.com/tags/atom/"}]},{"title":"sass的学习","slug":"sass-learning","date":"2017-03-30T00:53:39.000Z","updated":"2017-04-12T01:59:50.000Z","comments":true,"path":"2017/03/30/sass-learning/","link":"","permalink":"https://feliuyg.github.com/2017/03/30/sass-learning/","excerpt":"","text":"用于记录sass的一些常用知识点，便于后期自己的查阅与巩固。 语法导入导入（@import）scss文件最终编译会被合并成一个css文件，而导入CSS文件则保留以@import方式存在。另外导入scss文件可以省略后缀名，一处文件命名以 _ 开头，导入也可以省略 _。 1234// a.scssbody &#123; background: #eee;&#125; 123456// b.scss@import \"reset.css\";@import \"a\";p &#123; background: #0982c1;&#125; 编译出来的b.css样式 1234567@import \"reset.css\";body &#123; background: #eee;&#125;p &#123; background: #0982c1;&#125; 注释sass有两种注释，一种是标准的css注释 /* */，一种是 // 双斜杠形式的单行注释。后一种注释不会被转译出来。 1234567/** 这是多行注释，会被转译*/// 这是单行注释，不会被转译body &#123; padding: 5px;&#125; 变量sass变量以$开头，后面紧跟变量名，变量值与变量名之间用：分隔开，如果值后面加上!default则表示默认值。 12345678910// sass style$fontSize: 12px;body &#123; font-size: $fontSize;&#125;// css stylebody &#123; font-size: 12px;&#125; 多值变量分为list类型和map类型。list类型有点像js中的数组，map类型有点像js中的对象。 list: 通过空格，逗号火小括号分隔，用nth($var, $index)取值 12345678910111213141516// sass style$linkColor: #08c #333 !default; //第一个为默认值，第二个为鼠标滑过值a &#123; color: nth($linkColor, 1); &amp;:hover &#123; color: nth($linkColor, 2); &#125;&#125;//css stylea &#123; color: #08c;&#125;a:hover &#123; color: #333;&#125; map : 以key和value成对出现，格式为$map: (key1: value1, key2: value2), 取值为map-get($map, $key) 123456789101112131415161718// sass style$heading: (h1: 2em, h2: 1.5em, h3: 1.2em);@each $header, $size in $headings &#123; #&#123;$header&#125; &#123; font-size: $size; &#125;&#125;// css styleh1 &#123; font-size: 2em;&#125;h2 &#123; font-size: 1.5em;&#125;h3 &#123; font-size: 1.2em;&#125; 嵌套分两种： 一种是选择器的嵌套，另一种是属性的嵌套。 选择器嵌套中，可以用&amp;表示父元素选择器 123456789101112131415161718192021222324252627//sass style#top &#123; line-height: 1.5; li &#123; float: left; &#125; a &#123; display: block; &amp;:hover &#123; color: #ddd; &#125; &#125;&#125;//css style#top &#123; line-height: 1.5;&#125;#top li &#123; float: left&#125;#top a &#123; display: block;&#125;#top a:hover &#123; color: #ddd;&#125; 属性嵌套（一般用的较少） 1234567891011121314151617// sass style.div &#123; border: &#123; style: solid; left: &#123; width: 4px; color: #888; &#125; &#125;&#125;// css style.div &#123; border-style: solid; border-left-width: 4px; border-left-color: #888;&#125; 混合（mixin）声明@mixin,@include调用 无参数 123456789101112// sass style@mixin center-block &#123; margin: 0 auto;&#125;.demo &#123; @include center-block;&#125;//css style.demo &#123; margin: 0 auto;&#125; 有参数 1234567@mixin opacity($opacity: 50) &#123; //不传入参数则使用默认值50 opacity: $opacity / 100; filter: alpha(opacity=$opaciy);&#125;.opacity-80 &#123; @include opacity(80)&#125; 继承12345678910111213141516//sass styleh1 &#123; border: 4px solid #ff9aa9;&#125;.speak &#123; @extend h1; border-width: 2px;&#125;//css styleh1,.speak &#123; border: 4px solid #ff9aa9;&#125;.speaker &#123; border-width: 2px;&#125; 函数使用最多的是颜色函数， lighten($color, $amount)减淡和darken($color, $amount) , $amount为百分比。 1234567891011121314151617181920212223242526// sass style$baseFontSize: 10px!default;$gay: #ccc!default;@function pxToRem($px) &#123; @return $px / $baseFontSize * 1rem;&#125;body &#123; font-size: $baseFontSize; color: lighten($gray, 10%);&#125;.test &#123; font-size: pxToRem(16px); color: darken($gray, 10%);&#125;// css stylebody &#123; font-size: 10px; color: #e6e6e6;&#125;.test &#123; font-size: 1.6rem; color: #b3b3b3;&#125;","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://feliuyg.github.com/tags/前端/"},{"name":"sass","slug":"sass","permalink":"https://feliuyg.github.com/tags/sass/"}]},{"title":"历史记录管理之pushState的使用","slug":"pushState","date":"2017-03-20T14:26:44.000Z","updated":"2017-03-21T02:01:44.000Z","comments":true,"path":"2017/03/20/pushState/","link":"","permalink":"https://feliuyg.github.com/2017/03/20/pushState/","excerpt":"","text":"ajax可以实现页面的无刷新，但是也带来另外一个问题，就是无法后退。这个时候pushState就派上用场了，也是无刷新的。它的作用就是，往浏览器的历史记录里塞一个地址与状态，这个时候就可以实现无刷新并且可以前进后退。与ajax的结合使用，就是俗称的pjax。 API history.pushState向浏览器的历史记录中添加一个状态 1history.pushState(state, title, url) 参数详解： state object – 状态对象，与历史记录相关。当用户定向到一个新的状态时（一般就是浏览器的前进与后退），会触发popstate事件。事件的state属性包含了历史记录的state对象。 title – 火狐浏览器忽略此参数，但考虑到将来有可能改变，传递一个空字符串是安全的做法。 url – 这个参数提供了新历史记录的地址。但浏览器在调用pushState方法之后不会去加载这个url。如果它是一个相对地址，那一定是相对于当前的url，新的url必须和当前的url在同一源下，否则会抛出异常。 注意：url中带 &#39;#&#39;或&#39;?&#39; 并不会触发onhashchange事件 history.replaceState替换浏览器历史记录的当前记录。 1history.replace(state, title, url) window.onpopstate监听历史记录状态的变化。pushState和replaceState本身不会触发该事件 123window.onpopstate = function (event) &#123; console.log(event.state);&#125; API的简单运用 pushState 123window.onload = function () &#123; history.pushState(&#123;'page': 1&#125;, '', '#page1') // 打开新的页面可以发现,浏览器的左上方出现了可以返回的按钮&#125; replaceState 123window.onload = function () &#123; history.replaceState(&#123;'page': 2&#125;, '', '#page2') // 打开新的页面可以发现,浏览器的左上方按钮还是灰的，但是地址栏上增加了一个hash值page2&#125; 完整实例–猜数字游戏 （来自《JavaSript权威指南》）demo地址 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;pushstate&lt;/title&gt; &lt;style&gt; #prompt &#123; font-size: 16px; &#125; table &#123; width: 90%; margin: 10px; margin-left: 5%; &#125; #low, #high &#123; background-color: lightgray; height: 1em; &#125; #mid &#123; background-color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 id=&quot;heading&quot;&gt;I&apos;m thinking of a number ...&lt;/h1&gt; &lt;table&gt; &lt;tr&gt; &lt;td id=&quot;low&quot;&gt;&lt;/td&gt; &lt;td id=&quot;mid&quot;&gt;&lt;/td&gt; &lt;td id=&quot;high&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;label id=&quot;prompt&quot;&gt;&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;input&quot;&gt; &lt;script&gt; window.onload = newgame window.onpopstate = popState var state,ui function newgame (playagain) &#123; ui = &#123; heading: null, prompt: null, input: null, low: null, mid: null, high: null &#125; for (var id in ui) &#123; ui[id] = document.getElementById(id) &#125; ui.input.onchange = handleGuess state = &#123; n: Math.floor(99 * Math.random() + 1), low: 0, high: 100, guessnum: 0, guess: undefined &#125; display(state) if (playagain === true) &#123; save(state) &#125; &#125; function handleGuess () &#123; var g = parseInt(this.value) if ((g &gt; state.low) &amp;&amp; (g &lt; state.high)) &#123; if (g &lt; state.n) &#123; state.low = g &#125; else if (g &gt; state.n) &#123; state.high = g &#125; state.guess = g state.guessnum++ save(state) display(state) &#125; else &#123; alert(&quot;Please enter a number greater than &quot; + state.low + &quot; and less than &quot; + state.high) &#125; &#125; function display (state) &#123; ui.heading.innerHTML = document.title = &quot;I&apos;m thinking of a number between &quot; + state.low + &quot; and &quot; + state.high + &quot;.&quot; ui.low.style.width = state.low + &quot;%&quot; ui.mid.style.width = (state.high - state.low) + &quot;%&quot; ui.high.style.width = (100 - state.high) + &quot;%&quot; ui.input.style.visibility = &quot;visible&quot; ui.input.value = &quot;&quot; ui.input.focus() if (state.guess === undefined) &#123; ui.prompt.innerHTML = &quot;Type your guess and hit Enter:&quot; &#125; else if (state.guess &lt; state.n) &#123; ui.prompt.innerHTML = state.guess + &quot; is too low. Guess again:&quot; &#125; else if (state.guess &gt; state.n) &#123; ui.prompt.innerHTML = state.guess + &quot; is too high. Guess again:&quot; &#125; else &#123; ui.input.style.visibility = &quot;hidden&quot; ui.heading.innerHTML = document.title = state.guess + &quot; is correct!&quot; ui.prompt.innerHTML = &quot;You win! &lt;button onclick=&apos;newgame(true)&apos;&gt;Play Again&lt;/button&gt;&quot; &#125; &#125; function save (state) &#123; if (!history.pushState) return var url = &quot;?guess=&quot; + state.guessnum history.pushState(state, &quot;&quot;, url) &#125; function popState (event) &#123; if (event.state) &#123; state = event.state display(state) &#125; else &#123; history.replaceState(state, &quot;&quot;, &quot;#guess&quot; + state.guessnum) &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://feliuyg.github.com/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://feliuyg.github.com/tags/前端/"}]}]}